{"version":3,"sources":["serviceWorker.js","info.js","MusicPlayer/MusicPlayer.js","MusicLibrary/MusicLibrary.js","Scan/Scan.js","Nav/Nav.js","index.js"],"names":["Boolean","window","location","hostname","match","info","convertToMins","totalSeconds","minutes","Math","floor","leftOverSeconds","String","seconds","MusicPlayer","props","state","songId","songTitle","this","refs","TrackSliderRef","value","prevProps","songItem","setState","audio","pause","load","play","currentTimeRef","innerText","audioPlayer","document","getElementById","paused","bool","parseInt","currentSongId","fetchSource","a","fetch","buildURL","res","json","resJSON","url","port","then","setAudioSource","catch","err","console","log","newAudioSrc","id","src","name","trackSlider","fullTrackTime","duration","max","fullTrackTimeInMins","currentTrackTime","currentTime","time","trackSliderValue","Fragment","className","controls","ref","onTimeUpdate","updateTrackTime","onDurationChange","setTrackSlider","type","min","onInput","updateTrackSlider","onClick","prevOrNext","height","width","playOrPause","React","Component","MusicLibrary","changeSong","event","SelectedSongId","target","getAttribute","SelectedSongTitle","Number","isInteger","error","isLoaded","message","allSongs","songs","listItems","map","song","musicid","musictitle","key","path","Scan","useState","setPath","useEffect","response","responseJSON","status","fetchData","htmlFor","Nav","navStyle","color","textDecoration","to","style","ReactDOM","render","StrictMode","exact","component","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf37d969.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const info = {\n    \"url\":\"http://localhost:\",\n    \"port\":\"5000\"\n};\n\nexport default info;","import React from 'react';\nimport './MusicPlayer.css';\nimport info from '../info';\n\n\n// takes totalSeconds int as a parameter \n// outputs JSON object {min: string, seconds: string}\nfunction convertToMins(totalSeconds){\n  let minutes = Math.floor(totalSeconds/60);\n  let leftOverSeconds = totalSeconds - minutes*60;\n  if (leftOverSeconds < 10){\n    leftOverSeconds = \"0\" + String(leftOverSeconds);\n  }\n  return {minutes: String(minutes), seconds: String(leftOverSeconds)};\n}\n\nclass MusicPlayer extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      songId: null,\n      songTitle: null,\n    };\n  }\n\n  componentDidMount(){\n    this.refs.TrackSliderRef.value = 0;\n  }\n\n  componentDidUpdate(prevProps){\n    // songItem is an array where songItem[0] holds songId and songItem[1] holds songTitle\n    if(this.props.songItem != null){\n      // songItem[0] holds songId\n      if(this.props.songItem[0] !== prevProps.songItem[0]){\n\n        this.setState({songId: this.props.songItem[0], songTitle: this.props.songItem[1]})\n\n        this.refs.audio.pause();\n        this.refs.audio.load();\n        this.refs.audio.play(); \n\n        //reset current track time\n        this.refs.currentTimeRef.innerText = 0;\n    }\n   }\n  }\n\n\n  //play and pause button\n  playOrPause(){\n    let audioPlayer = document.getElementById(\"audioPlayer\");\n    if(audioPlayer.paused){\n      audioPlayer.play();\n    }\n    else{\n      audioPlayer.pause();\n    }\n  }\n\n  //previous and next button\n  prevOrNext(bool){\n    bool = parseInt(bool);\n    let currentSongId = this.state.songId;\n\n    if(currentSongId != null){\n\n      currentSongId = parseInt(currentSongId);\n\n      // prev song\n      if(bool === 0){\n        currentSongId = currentSongId - 1;\n      }\n      // next song\n      else{\n        currentSongId = currentSongId + 1;\n      }\n\n      let buildURL = info.url + info.port +\"/checksong/\" +String(currentSongId);\n\n      async function fetchSource() {\n        let res = await fetch(buildURL);\n        let resJSON = await res.json();\n        return resJSON;\n      }\n\n      fetchSource()\n      .then(res =>this.setAudioSource(res))\n      .catch(err => console.log(err));\n    }\n  }\n\n  // set audio source \n  // called by prevOrNext function \n  setAudioSource(songItem){\n    let newAudioSrc= info.url + info.port + \"/song/\" + songItem.id;\n    document.getElementById(\"audioSource\").src = newAudioSrc;\n    let audioPlayer = document.getElementById(\"audioPlayer\");\n    \n    //change song title and song id\n    this.setState({songId: songItem.id, songTitle: songItem.name});\n\n    audioPlayer.pause();\n    audioPlayer.load();\n    audioPlayer.play();\n  }\n\n  //triggered by onDurationChange event by 'audio' tag\n  setTrackSlider(){\n    let audioPlayer = document.getElementById(\"audioPlayer\");\n    let trackSlider = document.getElementById(\"TrackSliderId\");\n    trackSlider.value = 0;\n    let fullTrackTime = Math.floor(audioPlayer.duration);\n    trackSlider.max = fullTrackTime;\n    let fullTrackTimeInMins = convertToMins(fullTrackTime);\n    document.getElementById(\"TotalTimeId\").innerText = fullTrackTimeInMins.minutes+\":\"+fullTrackTimeInMins.seconds;\n  }\n\n  //triggered by onTimeUpdate event by 'audio' tag\n  updateTrackTime(){\n    let audioPlayer = document.getElementById(\"audioPlayer\");\n    let currentTrackTime = Math.floor(audioPlayer.currentTime);\n    let time = convertToMins(currentTrackTime);\n    document.getElementById(\"currentTimeId\").innerText = time.minutes + \":\" + time.seconds;\n\n    let trackSlider = document.getElementById(\"TrackSliderId\");\n    trackSlider.value = currentTrackTime;\n  }\n\n    //triggered by onInput event by 'input' tag\n    updateTrackSlider() {\n      let audioPlayer = document.getElementById(\"audioPlayer\");\n  \n      if(audioPlayer.duration > 0){\n        let trackSlider = document.getElementById(\"TrackSliderId\");\n        let trackSliderValue = parseInt(trackSlider.value);\n        audioPlayer.currentTime = trackSliderValue;\n      }\n    }\n\n  render() {\n\n    return (\n      <React.Fragment>\n\n        {/* Music Player */}\n        <div id=\"MusicPlayerDiv\" className=\"MusicPlayer\">\n\n            <p id=\"playerTitle\">{this.state.songTitle}</p>\n           \n            <audio controls ref=\"audio\" id=\"audioPlayer\" onTimeUpdate={this.updateTrackTime} onDurationChange={this.setTrackSlider} >\n              <source src={info.url + info.port + \"/song/\" + this.state.songId} type=\"audio/mpeg\" id=\"audioSource\"/>\n            </audio>\n            \n            <div id=\"slider\">\n              <input type=\"range\" min=\"0\" max=\"100\" className=\"TrackSlider\" id=\"TrackSliderId\" ref=\"TrackSliderRef\" onInput={this.updateTrackSlider}></input>  \n              <span  className=\"timerSpan\">\n                <i className=\"timer\" ref=\"currentTimeRef\" id=\"currentTimeId\"></i>\n                <i className=\"timer\" id=\"TotalTimeId\"></i>\n              </span>\n            </div>\n\n            <div id=\"controlsId\" className=\"controls\">\n              <a onClick={() => this.prevOrNext(0)}><img src=\"./icons/back.svg\" height=\"30\" width=\"30\"/></a>\n              <a onClick={this.playOrPause}><img src=\"./icons/play.svg\" height=\"30\" width=\"30\"/></a>\n              <a onClick={() => this.prevOrNext(1)}><img src=\"./icons/next.svg\" height=\"30\" width=\"30\"/></a>\n            </div>\n        \n        </div>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default MusicPlayer;\n\n","import React from 'react';\nimport MusicPlayer from '../MusicPlayer/MusicPlayer';\nimport './MusicLibrary.css'\nimport info from '../info';\n\nclass MusicLibrary extends React.Component{\n\n  constructor(props){\n      super(props);\n      this.state = {\n        //songItem is sent to MusicPlayer component\n        songItem: [],\n        error: null,\n        isLoaded: false,\n        message: null,\n        allSongs: []\n      };\n    }\n\n  async componentDidMount(){\n\n    try{\n      let res = await fetch(info.url+info.port+\"/songs\");\n      let resJSON = await res.json();\n\n      if(resJSON.songs != null){\n        this.setState({isLoaded: true, allSongs: resJSON.songs});\n      }\n      else{\n        //need to tell user to scan for music\n        this.setState({message:resJSON.message})\n      }\n    }\n    catch(err){\n      this.setState({error:\"Server isn't started\"});\n    }\n  }\n            \n  // when user clicks on a MusicCard div\n  // gets song id and title and set state of songItem\n  // MusicPlayer component will re-render \n  changeSong = (event) => { \n    let SelectedSongId = parseInt(event.target.getAttribute('musicid'));\n    let SelectedSongTitle = event.target.getAttribute('musictitle');\n    \n    if(Number.isInteger(SelectedSongId)){\n      this.setState({songItem:[SelectedSongId,SelectedSongTitle]});\n    }\n  }\n\n\n  render(){\n    {\n      const {error, isLoaded, allSongs} = this.state;\n      if(error){\n        return <div><h1 className=\"scanMessage\">Error: {this.state.error}</h1></div>;\n      }\n      // Tell user to scan for music\n      else if(!isLoaded){\n        return <div><h1 className=\"scanMessage\">{this.state.message}</h1></div>;\n      }\n      else{\n        const listItems = allSongs.map((song) =>\n        <div className='MusicCards' musicid={song.id} musictitle={song.name} key={song.id}>\n          <span>\n            <b className=\"MusicID\" musicid={song.id} musictitle={song.name}>{song.id}: </b>\n            <b className=\"MusicName\" musicid={song.id} musictitle={song.name}>{song.name}</b>\n          </span>\n          <p className=\"MusicPath\" musicid={song.id} musictitle={song.name}>Path: {song.path}</p>\n        </div>\n        )\n        \n        return(\n          <React.Fragment>\n            <MusicPlayer songItem={this.state.songItem}/>\n            <div id=\"MusicListDiv\" className=\"MusicList\" onClick={this.changeSong}>{listItems}</div>\n          </React.Fragment>\n        );\n      }\n    }\n  }\n}\n\n\nexport default MusicLibrary;","import React, { useState, useEffect } from 'react';\nimport './Scan.css';\nimport info from '../info';\n\n\nfunction Scan(){\n\n  const [path, setPath] = useState(\"\");\n\n  //when 'path' gets updated \n  useEffect(() => {\n  \n    let buildURL = info.url + info.port + \"/directory/?directory=\"+ path;\n    \n    if(path !== \"\"){\n      \n      fetchData();\n    \n      async function fetchData(){\n        \n        let response = await fetch(buildURL);\n        let responseJSON = await response.json();\n        console.log(responseJSON);\n        document.getElementById(\"message\").innerText = responseJSON.status;\n      }\n    }\n  })\n\n    return (\n      <React.Fragment>\n\n     \n        <div className=\"scan\">\n          <div>\n            <h2>Scan</h2>\n            <span><label htmlFor=\"path\">Enter Directory Path:</label></span><br/>\n            <input type=\"text\" id=\"path\" name=\"path\"></input><br/>\n            <button onClick={() => setPath(document.getElementById('path').value)}>Scan</button><br/>\n            <label id=\"message\" className=\"message\"></label>\n          </div>\n        </div>\n\n      </React.Fragment>\n    );\n  }\n\n\nexport default Scan;\n\n","import React from 'react';\nimport './Nav.css';\nimport { Link } from 'react-router-dom';\n\n\nfunction Nav(){\n\n    const navStyle = {\n        color: \"white\",\n        textDecoration: \"none\"\n    };\n\n    return (\n\n        <div className=\"navBar\">\n            <span>\n                <Link to=\"/\" id=\"player\" style={navStyle}>Player</Link>\n                <Link to=\"/scan\" id=\"scan\" style={navStyle}>Scan</Link>\n            </span>\n        </div>\n\n    );\n}\n\nexport default Nav;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\nimport './index.css';\n\nimport MusicLibrary from './MusicLibrary/MusicLibrary';\nimport Scan from './Scan/Scan';\nimport Nav from './Nav/Nav';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n      \n      <Router>\n\n        <Nav/>\n        \n        <Switch>\n          <Route path='/' exact component={MusicLibrary}/>\n          <Scan path='/scan' component={Scan}/>\n        </Switch>\n      \n      </Router>\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}